<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
Recuerde que una gramática $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. 
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de <i>variables sintácticas</i> o <i>categorías gramáticales</i>,
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \rightarrow \alpha$.
  Un elemento de $P$ se denomina producción. 
  <li>Por último, $S$ es un símbolo del conjunto
  $V$ que se denomina símbolo de arranque.
</ol>
<ol>
  <li> $\Sigma = \{  VAR, CONST, PROCEDURE, BEGIN, END, ODD, CALL, IF, THEN, ELSE, WHILE, DO, ;, =, ID, +, -, *, /, (, ), NUMBER, COMPARISON \}$, 
  <li> $V = \{ prog, block, constants, anotheridconst, variables, anotheridvar, procedures, statement, anotherstatement, parameters, anotherparameter, condition, expression \}$
  <li> Productions:
  <ol>
    <li>
<pre id="gramatica">
prog
    : block '.' EOF
    ;

block
    : constants variables procedures statement
    ;

constants
    :/* empty */
    |CONST ID '=' NUMBER anotheridconst ';'
    ;

anotheridconst
    : /* empty */
    |',' ID '=' NUMBER anotheridconst
    ;

variables 
    :/*empty*/
    |VAR ID anotheridvar ';'
    ;

anotheridvar
    : /*empty*/
    |',' ID anotheridvar ';'
    ;

procedures
    :/*empty*/
    |PROCEDURE ID parameters ';' block ';' procedures
    ;

statement
    : ID '=' expression
    | CALL ID parameters
    | BEGIN statement anotherstatement END
    | IF condition THEN statement
    | IF condition THEN statement ELSE statement
    | WHILE condition DO statement
    ;

anotherstatement
    : /*empty*/
    | ';' statement anotherstatement
    ;

parameters
    : /*empty*/
    | '(' ID anotherparameter ')'
    ;

anotherparameter
    : /*empty*/
    | ',' ID anotherparameter
    ;

condition
    :ODD expression
    |expression COMPARISON expression
    ;

expression
    : ID '=' expression
    | expression '+' expression
    | expression '-' expression
    | expression '*' expression
    | expression '/' expression
    | '-' expression %prec UMINUS
    | '+' expression %prec UMINUS
    | '(' expression ')'
    | NUMBER
    | ID
    ;

</pre>
  </ol>
  <li> Start symbol: $prog$
</ol>
<BR>
<BR>

